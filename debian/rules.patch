# -*- makefile -*-
# rules to patch the unpacked files in the source directory
# ---------------------------------------------------------------------------
# various rules to unpack addons and (un)apply patches.
# 	- patch / apply-patches
#	- unpatch / reverse-patches

.NOTPARALLEL:

patchdir	?= debian/patches
series_file	?= $(patchdir)/series

# which patches should be applied?

debian_patches = \
	git-updates \

#	git-updates \

ifneq ($(GFDL_INVARIANT_FREE),yes)
  debian_patches += \
	git-doc-updates \
	rename-info-files \

#	git-doc-updates \

else
endif
debian_patches += \
	gcc-gfdl-build

debian_patches += \
	gcc-textdomain \
	gcc-distro-specs \
	gcc-driver-extra-langs \
	gcc-hash-style-gnu \
	libstdc++-pic \
	libstdc++-doclink \
	libstdc++-man-3cxx \
	libstdc++-test-installed \
	alpha-no-ev4-directive \
	note-gnu-stack \
	libgomp-omp_h-multilib \
	libgo-testsuite \
	libgo-cleanfiles \
	gcc-target-include-asm \
	libgo-revert-timeout-exp \
	libgo-setcontext-config \
	gcc-auto-build \
	libitm-no-fortify-source \
	sparc64-biarch-long-double-128 \
	pr66368 \
	pr67590 \
	libffi-race-condition \
	cuda-float128 \
	t-libunwind-elf-Wl-z-defs \
	gcc-force-cross-layout \
	gcc-search-prefixed-as-ld \
	kfreebsd-decimal-float \
	pr87808 \
	pr94253 \
	gcc-arm-disable-guality-tests \
	musl-ssp \
	pr79724-revert \
	pr104290-followup \
	arc-stddef \
	libstdc++-hurd \
	pr107475 \
	pr93371 \
	libsanitizer-timebits \
	asan-allocator-base \
	gcc-vhdl \
	pr114533 \

# with glibc (>= 2.31)
ifeq (,$(filter $(distrelease),wheezy jessie stretch buster precise xenial bionic))
  debian_patches += libsanitizer-no-crypt
endif

ifneq (,$(filter $(distrelease),precise xenial bionic focal groovy hirsute))
  debian_patches += pr100067-revert
endif

ifneq (,$(filter $(distrelease), jessie stretch buster bullseye precise trusty xenial bionic focal groovy hirsute))
  debian_patches += dwarf5-revert-default
  ifneq ($(GFDL_INVARIANT_FREE),yes)
    debian_patches += dwarf5-revert-default-doc
  endif
endif

ifeq (,$(filter $(distrelease),$(no_timet64_distreleases)))
  debian_patches += pr99832-distro
  debian_patches += pr114065-proposed
endif

# TODO:
#	pr81829 \

#	$(if $(filter yes, $(DEB_CROSS)),,gcc-print-file-name) \
#	libstdc++-nothumb-check \

hardening_patches =
ifneq (,$(filter $(derivative),Ubuntu))
  ifneq (,$(findstring gcc-12, $(PKGSOURCE)))
    hardening_patches += \
	gcc-distro-specs-ubuntu-doc \
	testsuite-hardening-format \
	testsuite-hardening-printf-types \
	testsuite-hardening-updates \
	testsuite-glibc-warnings
  endif
else ifneq (,$(filter $(derivative),Debian))
  ifneq (,$(findstring gcc-12, $(PKGSOURCE)))
#    ifneq ($(with_pie),yes)
#      hardening_patches += \
#        ignore-pie-specs-when-not-enabled
#    endif
  endif
endif

# FIXME 4.5: Drop and adjust symbols files
ifneq (,$(findstring 4.4, $(PKGSOURCE)))
  debian_patches += pr39491
endif

# Patches for non-core languages.

debian_patches += gm2 gm2-info-no-headers
ifeq ($(GFDL_INVARIANT_FREE),yes)
  debian_patches += gm2-texinfo
else
  debian_patches += gm2-doc
  debian_patches += gm2-makeinfo-force
endif

# Most of the time, it would be safe to apply them whether the
# language is selected or not. But when working on a new GCC version,
# it is convenient to concentrate on core languages, and refresh them
# later when working on the specific language.
ifeq ($(with_ada),yes)
    debian_patches += ada-gcc-name
    debian_patches += ada-verbose
  ifeq ($(biarch64),yes)
    debian_patches += ada-nobiarch-check
  endif
    debian_patches += ada-link-lib
    debian_patches += ada-gnattools-cross
    ifeq ($(with_gnatsjlj),yes)
      debian_patches += ada-sjlj
    endif
    debian_patches += ada-lib-info-source-date-epoch
    # FIXME: debian_patches += ada-749574
    debian_patches += ada-perl-shebang
endif

# FIXME: still relevant?
#	gdc-multiarch

ifeq ($(GFDL_INVARIANT_FREE),yes)
  debian_patches += gdc-texinfo
endif
ifeq (,$(filter $(DEB_TARGET_ARCH),amd64 i386 armhf))
  debian_patches += disable-gdc-tests
endif

debian_patches += alpha-ieee
ifneq ($(GFDL_INVARIANT_FREE),yes)
  debian_patches += alpha-ieee-doc
endif

# all patches below this line are applied for gcc-snapshot builds as well

ifneq (,$(findstring gcc-snapshot, $(PKGSOURCE)))
  debian_patches =
endif

debian_patches += \
	sys-auxv-header \
	gdc-dynamic-link-phobos \
	ia64-disable-selective-scheduling \
	libstdc++-pythondir \
	gcc-verbose-lto-link \

ifeq ($(with_ada),yes)
  debian_patches += \
	ada-armel-libatomic \
	ada-kfreebsd
endif

ifeq ($(with_ibm_branch),yes)
  debian_patches += ibm-branch
endif

ifeq ($(with_softfloat),yes)
  debian_patches += arm-multilib-soft-float
else ifeq ($(multilib),yes)
  ifneq (,$(biarchhfarchs)$(biarchsfarchs))
    ifneq (,$(filter $(distrelease), precise))
      debian_patches += arm-multilib-softfp$(if $(filter yes,$(DEB_CROSS)),-cross)
    else
      debian_patches += arm-multilib-soft$(if $(filter yes,$(DEB_CROSS)),-cross)
    endif
  endif
endif
ifneq (,$(filter $(distrelease), precise trusty xenial bionic focal groovy hirsute))
  debian_patches += arm-multilib-defaults
endif

ifeq ($(DEB_CROSS),yes)
  debian_patches += cross-fixes
  debian_patches += cross-install-location
  ifeq ($(with_m2),yes)
    debian_patches += cross-install-location-gm2
  endif
endif

ifeq ($(DEB_TARGET_ARCH_OS),hurd)
  debian_patches += hurd-changes
  # FIXME: #1005297, PR 104660
  debian_patches += libgo-hurd-hack
endif

debian_patches += gcc-ice-dump
debian_patches += gcc-ice-apport
debian_patches += skip-bootstrap-multilib
debian_patches += libffi-ro-eh_frame_sect

# sigaction on sparc changed between glibc 2.19 and 2.21
ifeq (,$(filter 2.1%, $(shell dpkg-query -l libc-bin | awk '/^.i/ {print $$3}')))
  # keep it, gets remove in GCC from time to time
  #debian_patches += pr67899
endif

debian_patches += gcc-multiarch
debian_patches += config-ml
ifneq ($(single_package),yes)
  ifeq ($(with_multiarch_cxxheaders),yes)
    debian_patches += g++-multiarch-incdir
    debian_patches += canonical-cpppath
  endif
endif
ifneq (,$(filter $(build_type), build-cross cross-build-cross))
  debian_patches += cross-no-locale-include
  debian_patches += cross-biarch
endif
debian_patches += gcc-multilib-multiarch

ifneq ($(trunk_build),yes)
ifneq (,$(filter $(derivative),Ubuntu))
  debian_patches += gcc-as-needed
  ifeq (,$(filter $(distrelease), precise trusty xenial))
    debian_patches += gcc-as-needed-gold
  endif
else # Debian
  ifeq (,$(filter $(distrelease), jessie stretch))
    debian_patches += gcc-as-needed gcc-as-needed-gold
  endif
endif
endif

debian_patches += libgomp-kfreebsd-testsuite
debian_patches += go-testsuite

# don't remove, this is regularly overwritten, see PR sanitizer/63958.
#debian_patches += libasan-sparc

# LoongArch backport.
debian_patches += \
	loong64/0001-loongarch-add-alternatives-for-idiv-insns-to-improve \
	loong64/0002-loongarch-avoid-unnecessary-sign-extend-after-32-bit \
	loong64/0003-LoongArch-Provide-fmin-fmax-RTL-pattern \
	loong64/0004-LoongArch-Libitm-add-LoongArch-support \
	loong64/0005-LoongArch-Use-UNSPEC-for-fmin-fmax-RTL-pattern-PR105 \
	loong64/0006-LoongArch-Fixed-a-bug-in-the-loongarch-architecture- \
	loong64/0007-LoongArch-implement-count_-leading-trailing-_zeros \
	loong64/0008-Libvtv-Add-loongarch-support \
	loong64/0009-LoongArch-Add-fcopysign-instructions \
	loong64/0010-LoongArch-fix-signed-overflow-in-loongarch_emit_int_ \
	loong64/0011-LoongArch-Add-ftint-rm-rp-.-w-l-.-s-d-instructions \
	loong64/0012-LoongArch-Add-fscaleb.-s-d-instructions-as-ldexp-sf- \
	loong64/0013-LoongArch-Add-flogb.-s-d-instructions-and-expand-log \
	loong64/0014-LoongArch-Optimize-immediate-load \
	loong64/0015-LoongArch-Optimize-the-implementation-of-stack-check \
	loong64/0016-LoongArch-Don-t-add-crtfastmath.o-for-shared \
	loong64/0017-LoongArch-Generate-bytepick.-wd-for-suitable-bit-ope \
	loong64/0018-LoongArch-Change-the-value-of-macro-TRY_EMPTY_VM_SPA \
	loong64/0019-LoongArch-testsuite-Disable-stack-protector-for-some \
	loong64/0020-LoongArch-Remove-the-definition-of-the-macro-LOGICAL \
	loong64/0021-LoongArch-Improve-GAR-store-for-va_list \
	loong64/0022-LoongArch-Improve-cpymemsi-expansion-PR109465 \
	loong64/0023-LoongArch-Change-the-default-value-of-LARCH_CALL_RAT \
	loong64/0024-libffi-Backport-of-LoongArch-support-for-libffi \
	loong64/0025-LoongArch-Remove-redundant-sign-extension-instructio \
	loong64/0026-LoongArch-Optimize-switch-with-sign-extended-index \
	loong64/0027-LoongArch-Support-storing-floating-point-zero-into-M \
	loong64/0028-LoongArch-initial-ada-support-on-linux \
	loong64/0029-LoongArch-Adjust-C-multilib-header-layout \
	loong64/0030-LoongArch-Use-LSX-and-LASX-for-block-move \
	loong64/0031-LoongArch-Slightly-simplify-loongarch_block_move_str \
	loong64/0032-LoongArch-Optimized-multiply-instruction-generation \
	loong64/0033-LoongArch-Fix-up-memcpy-vec-3.c-test-case \
	loong64/0034-LoongArch-Add-tests-of-mstrict-align-option \
	loong64/0035-LoongArch-Add-testsuite-framework-for-Loongson-SX-AS \
	loong64/0036-LoongArch-Add-tests-for-Loongson-SX-builtin-function \
	loong64/0037-LoongArch-Add-tests-for-SX-vector-floating-point-ins \
	loong64/0038-LoongArch-Add-tests-for-SX-vector-addition-instructi \
	loong64/0039-LoongArch-Add-tests-for-SX-vector-subtraction-instru \
	loong64/0040-LoongArch-Add-tests-for-SX-vector-addition-vsadd-ins \
	loong64/0041-LoongArch-Add-tests-for-the-SX-vector-multiplication \
	loong64/0042-LoongArch-Add-tests-for-SX-vector-vavg-vavgr-instruc \
	loong64/0043-LoongArch-Add-tests-for-SX-vector-vmax-vmaxi-vmin-vm \
	loong64/0044-LoongArch-Add-tests-for-SX-vector-vexth-vextl-vldi-v \
	loong64/0045-LoongArch-Add-tests-for-SX-vector-vabsd-vmskgez-vmsk \
	loong64/0046-LoongArch-Add-tests-for-SX-vector-vdiv-vmod-instruct \
	loong64/0047-LoongArch-Add-tests-for-SX-vector-vsll-vslli-vsrl-vs \
	loong64/0048-LoongArch-Add-tests-for-SX-vector-vrotr-vrotri-vsra- \
	loong64/0049-LoongArch-Add-tests-for-SX-vector-vssran-vssrani-vss \
	loong64/0050-LoongArch-Add-tests-for-SX-vector-vbitclr-vbitclri-v \
	loong64/0051-LoongArch-Add-tests-for-SX-vector-floating-point-ari \
	loong64/0052-LoongArch-Add-tests-for-SX-vector-vfrstp-vfrstpi-vse \
	loong64/0053-LoongArch-Add-tests-for-SX-vector-vfcmp-instructions \
	loong64/0054-LoongArch-Add-tests-for-SX-vector-handling-and-shuff \
	loong64/0055-LoongArch-Add-tests-for-SX-vector-vand-vandi-vandn-v \
	loong64/0056-LoongArch-Add-tests-for-SX-vector-vfmadd-vfnmadd-vld \
	loong64/0057-LoongArch-Add-tests-for-ASX-vector-xvadd-xvadda-xvad \
	loong64/0058-LoongArch-Add-tests-for-ASX-vector-xvhadd-xvhaddw-xv \
	loong64/0059-LoongArch-Add-tests-for-ASX-vector-subtraction-instr \
	loong64/0060-LoongArch-Add-tests-for-ASX-vector-xvmul-xvmod-xvdiv \
	loong64/0061-LoongArch-Add-tests-for-ASX-vector-xvmax-xvmaxi-xvmi \
	loong64/0062-LoongArch-Add-tests-for-ASX-vector-xvldi-xvmskgez-xv \
	loong64/0063-LoongArch-Add-tests-for-ASX-vector-xvand-xvandi-xvan \
	loong64/0064-LoongArch-Add-tests-for-ASX-vector-xvsll-xvsrl-instr \
	loong64/0065-LoongArch-Add-tests-for-ASX-vector-xvextl-xvsra-xvsr \
	loong64/0066-LoongArch-Add-tests-for-ASX-vector-xvbitclr-xvbitclr \
	loong64/0067-LoongArch-Add-tests-for-ASX-builtin-functions \
	loong64/0068-LoongArch-Add-tests-for-ASX-xvldrepl-xvstelm-instruc \
	loong64/0069-LoongArch-Add-tests-for-ASX-vector-floating-point-op \
	loong64/0070-LoongArch-Add-tests-for-ASX-vector-floating-point-co \
	loong64/0071-LoongArch-Add-tests-for-ASX-vector-comparison-and-se \
	loong64/0072-LoongArch-Add-tests-for-ASX-vector-xvfnmadd-xvfrstp- \
	loong64/0073-LoongArch-Add-tests-for-ASX-vector-xvabsd-xvavg-xvav \
	loong64/0074-LoongArch-Add-tests-for-ASX-vector-xvfcmp-caf-ceq-cl \
	loong64/0075-LoongArch-Add-tests-for-ASX-vector-xvfcmp-saf-seq-sl \
	loong64/0076-LoongArch-Add-tests-for-ASX-vector-xvext2xv-xvexth-x \
	loong64/0077-LoongArch-Add-tests-for-ASX-vector-xvpackev-xvpackod \
	loong64/0078-LoongArch-Add-tests-for-ASX-vector-xvssrln-xvssrlni- \
	loong64/0079-LoongArch-Add-tests-for-ASX-vector-xvssran-xvssrani- \
	loong64/0080-libsanitizer-add-LoongArch-support \
	loong64/0081-libjccjit-do-not-link-objects-contained-same-element \
	loong64/0082-LoongArch-Use-finer-grained-DBAR-hints \
	loong64/0083-LoongArch-Fix-lsx-vshuf.c-and-lasx-xvshuf_b.c-tests- \
	loong64/0084-LoongArch-Subdivision-symbol-type-add-SYMBOL_PCREL-s \
	loong64/0085-LoongArch-Support-split-symbol \
	loong64/0086-LoongArch-Modify-the-output-message-string-of-the-wa \
	loong64/0087-LoongArch-adjust-the-default-of-mexplicit-relocs-by- \
	loong64/0088-LoongArch-Define-the-macro-ASM_PREFERRED_EH_DATA_FOR \
	loong64/0089-LoongArch-Get-__tls_get_addr-address-through-got-tab \
	loong64/0090-LoongArch-Add-support-code-model-extreme \
	loong64/0091-LoongArch-Add-new-code-model-medium \
	loong64/0092-LoongArch-Avoid-RTL-flag-check-failure-in-loongarch_ \
	loong64/0093-LoongArch-add-model-attribute \
	loong64/0094-LoongArch-testsuite-refine-__tls_get_addr-tests-with \
	loong64/0095-LoongArch-add-mdirect-extern-access-option \
	loong64/0096-LoongArch-Fix-pr106828-by-define-hook-TARGET_ASAN_SH \
	loong64/0097-LoongArch-Prepare-static-PIE-support \
	loong64/0098-LoongArch-Fixed-a-typo-in-the-comment-information-of \
	loong64/0099-LoongArch-Rename-frint_-fmt-to-rint-mode-2 \
	loong64/0100-LoongArch-Add-prefetch-instructions \
	loong64/0101-LoongArch-Fixed-a-compilation-failure-with-c-in-inli \
	loong64/0102-LoongArch-Optimize-additions-with-immediates \
	loong64/0103-LoongArch-Enable-shrink-wrapping \
	loong64/0104-LoongArch-Set-default-alignment-for-functions-and-la \
	loong64/0105-LoongArch-Enable-free-starting-at-O2 \
	loong64/0106-LoongArch-Implement-128-bit-floating-point-functions \
	loong64/0107-iLoongArch-improved-target-configuration-interface \
	loong64/0108-LoongArch-add-new-configure-option-with-strict-align \
	loong64/0109-LoongArch-support-loongarch-elf-target \
	loong64/0110-LoongArch-Add-Loongson-SX-base-instruction-support \
	loong64/0111-LoongArch-Add-Loongson-SX-directive-builtin-function \
	loong64/0112-LoongArch-Add-Loongson-ASX-base-instruction-support \
	loong64/0113-LoongArch-Add-Loongson-ASX-directive-builtin-functio \
	loong64/0114-Fix-a-build-failure-with-no-system-assembler-or-syst \
	loong64/0115-LoongArch-Use-bstrins-instruction-for-a-mask-and-a-m \
	loong64/0116-LoongArch-Fix-unintentional-bash-ism-in-r14-3665 \
	loong64/0117-LoongArch-Enable-fsched-pressure-by-default-at-O1-an \
	loong64/0118-LoongArch-Fix-bug-of-optab-di3_fake \
	loong64/0119-LoongArch-Change-the-value-of-branch_cost-from-2-to- \
	loong64/0120-LoongArch-Add-LA664-support \
	loong64/0121-LoongArch-Fix-internal-error-running-gcc-march-nativ \
	loong64/0122-LoongArch-fix-some-compiling-errors \
	loong64/0123-loongarch.cc-rename-loongarch_memmodel_needs_release \
	loong64/0124-loongarch-add-a-missing-in-gnu-user.h \
	loong64/0125-loongarch-loongarch.cc-drop-undefined-hi64_part-para \
	loong64/0126-loongarch-loongarch.cc-add-missing-at-start-of-line- \
	loong64/0127-loongarch-loongarch.cc-drop-incomplete-TARGET_OPTION \
	loong64/0128-loongarch-loongarch.cc-drop-broken-op_mode-optimisat \
	loong64/0129-loongarch-loongarch-opts.h-fix-a-bad-merge-at-loonga \
	loong64/0130-LoongArch-Reimplement-multilib-build-option-handling \
	loong64/0131-Support-multilib-aware-target-lib-flags-self-specs-o \
	loong64/0132-fix-loongarch-t-linux-use-usr-lib-as-multilib-prefix \
	loong64/0133-fix-loongarch-driver.h-drop-loongarch-multilib.h \
	loong64/0134-LoongArch-Fix-print-operand-reloc

series_stamp = $(stampdir)/02-series-stamp
series: $(series_stamp)
$(series_stamp):
	echo $(strip $(addsuffix .diff,$(debian_patches))) \
	  | sed -r 's/  +/ /g' | tr " " "\n" > $(series_file)
ifneq (,$(strip $(hardening_patches)))
  ifneq ($(trunk_build),yes)
	echo $(strip $(addsuffix .diff,$(hardening_patches))) \
	  | sed -r 's/  +/ /g' | tr " " "\n" >> $(series_file)
  endif
endif
	sed -r 's/(.)$$/\1 -p1/' -i $(series_file)
	touch $@

autoconf_files = $(shell lsdiff --no-filename $(foreach patch,$(debian_patches),$(patchdir)/$(patch).diff) \
	    | sed -rn '/(configure\.ac|acinclude.m4)$$/s:[^/]+/src/:src/:p' | sort -u)
autoconf_dirs = $(sort $(dir $(autoconf_files)))

automake_files = $(addprefix ./, $(filter-out none, \
	  $(shell lsdiff --no-filename $(foreach patch,$(debian_patches),$(patchdir)/$(patch).diff) \
	    | sed -rn '/Makefile\.(am|in)$$/s:[^/]+/src/:src/:p' | sort -u)))

autoconf_version = 2.69
ifneq (,$(filter $(distrelease),stretch buster trusty xenial bionic focal groovy))
  autoconf_version =
endif
ifeq ($(trunk_build),yes)
  # The actual version depends on the build-dependencies set by
  # variable AUTO_BUILD_DEP in rules.conf.  Here, we assume the
  # correct version is installed.
  #autoconf_version =
endif

# FIXME: the auto* stuff is done every time for every subdir, which
# leads to build errors. Idea: record the auto* calls in the patch
# files (AUTO <dir> <auto-command with options>) and run them separately,
# maybe only once per directory).
$(patch_stamp): $(unpack_stamp) $(series_stamp)
	sync
	QUILT_PATCHES=$(patchdir) QUILT_PATCH_OPTS='-E' \
	  quilt --quiltrc /dev/null push -a || test $$? = 2

	: # only needed when we have changes, and currently fails with autogen 5.18
	: #cd $(srcdir)/fixincludes && ./genfixes

	sync
	echo -n $(autoconf_dirs) | xargs -d ' ' -L 1 -P $(USE_CPUS) -I{} \
	  sh -c 'echo "Running autoconf$(autoconf_version) in {}..." ; \
	  cd $(CURDIR)/{} && rm -f configure && \
	  AUTOM4TE=/usr/bin/autom4te$(autoconf_version) autoconf$(autoconf_version)'

	for i in $(debian_patches) $(hardening_patches); do \
	  echo -e "\n$$i:" >> pxxx; \
	  sed -n 's/^# *DP: */  /p' $(patchdir)/$$i.diff >> pxxx; \
	done
#	-$(srcdir)/move-if-change pxxx $@

	: # generate the distro-defaults.h header
	rm -f $(srcdir)/gcc/distro-defaults.h
	( \
	  echo '/* distro specific configuration injected by the distro build.  */'; \
	  echo ''; \
	  echo '#ifndef ACCEL_COMPILER' \
	) >> $(srcdir)/gcc/distro-defaults.h
ifeq ($(with_async_unwind),yes)
	echo '#define DIST_DEFAULT_ASYNC_UNWIND 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
endif
ifeq ($(with_ssp)-$(with_ssp_default),yes-yes)
	echo '#define DIST_DEFAULT_SSP 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
  ifeq (,$(filter $(distrelease), precise trusty))
	echo '#define DIST_DEFAULT_SSP_STRONG 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
  endif
	echo '#define DIST_DEFAULT_FORMAT_SECURITY 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
endif
ifneq (,$(filter $(derivative),Ubuntu))
  ifneq (,$(filter $(distrelease),lucid precise trusty xenial bionic focal jammy kinetic lunar mantic))
	( \
	  echo '#define DIST_DEFAULT_FORTIFY_SOURCE 2'; \
	  echo '#define DIST_DEFAULT_FORTIFY_SOURCE_S "2"' \
	) >> $(srcdir)/gcc/distro-defaults.h
  else
	( \
	  echo '#define DIST_DEFAULT_FORTIFY_SOURCE 3'; \
	  echo '#define DIST_DEFAULT_FORTIFY_SOURCE_S "3"' \
	) >> $(srcdir)/gcc/distro-defaults.h
  endif
	echo '#define DIST_DEFAULT_RELRO 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
	echo '#define DIST_DEFAULT_BIND_NOW 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
  ifneq (,$(findstring gcc-12, $(PKGSOURCE)))
# FIXME: this is directly patched
#	echo '#define DIST_DEFAULT_FORTIFY_SOURCE 1' \
#	     >> $(srcdir)/gcc/distro-defaults.h
  endif
  ifeq ($(with_stack_clash),yes)
	echo '#define DIST_DEFAULT_STACK_CLASH 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
  endif
  ifeq ($(with_cf_protection),yes)
	echo '#define DIST_DEFAULT_CF_PROTECTION 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
  endif
else ifneq (,$(filter $(derivative),Debian))
  ifneq (,$(findstring gcc-12, $(PKGSOURCE)))
  endif
endif
ifeq ($(with_timet64),yes)
	echo '#define DIST_DEFAULT_TIMET64 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
endif
	  echo '#endif' \
	     >> $(srcdir)/gcc/distro-defaults.h

	mv pxxx $@

unpatch:
	QUILT_PATCHES=$(patchdir) \
	  quilt --quiltrc /dev/null pop -a -R || test $$? = 2
	rm -rf .pc

update-patches: $(series_stamp)
	export QUILT_PATCHES=$(patchdir); \
	export QUILT_REFRESH_ARGS="--no-timestamps --no-index -pab"; \
	export QUILT_DIFF_ARGS="--no-timestamps --no-index -pab"; \
	while quilt push; do quilt refresh; done

patch: $(patch_stamp)
.PHONY: patch series quilt autotools
